//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Animation/PlayeInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Animation/PlayeInput.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PlayeInput: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PlayeInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayeInput"",
    ""maps"": [
        {
            ""name"": ""CharacterControls"",
            ""id"": ""3e955178-7cff-4159-888c-54ba90dfa6a4"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""97627244-e4ce-416b-bbee-477f6b078850"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""25f1858c-902e-4ad6-8fcb-ac86ebda0606"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""551c294f-d681-4cb3-80fc-af0a0562cabd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bad8abb3-16a9-460a-8e24-1c4d62c6fb24"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6b48dfc1-c262-4cdf-a28e-e9c7a046e82f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6094c550-c6cb-4475-b99a-c68ea0efac77"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""542368c7-c01a-427e-bbe3-ed4a5b24633e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""BattleControls"",
            ""id"": ""b9943f0c-aa4e-4bf0-be97-1cb3851d0d72"",
            ""actions"": [
                {
                    ""name"": ""SelectBasicATK"",
                    ""type"": ""Button"",
                    ""id"": ""053f4d41-7b2a-414a-9eef-15ad3b1e1962"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectSkill"",
                    ""type"": ""Button"",
                    ""id"": ""eac471d9-4d74-4961-81e9-2988c455f34f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectUltimate"",
                    ""type"": ""Button"",
                    ""id"": ""911a2207-55eb-4fc3-9840-8c11fe0ee593"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConfirmBasicATK"",
                    ""type"": ""Button"",
                    ""id"": ""555a1a22-7982-4aa4-95b4-9f39846cc139"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConfirmSkill"",
                    ""type"": ""Button"",
                    ""id"": ""a8ae55ab-4b34-412c-b39b-ee4bfb66ae3b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConfirmUltimate"",
                    ""type"": ""Button"",
                    ""id"": ""e5a852f3-7469-4a62-8b32-67232bf86cd9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Navigate"",
                    ""type"": ""Button"",
                    ""id"": ""049e572c-8dc9-4965-a757-b9ce5d078b96"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""79aaf6ed-f5c6-4118-b6c0-78eb9aedf8b1"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectBasicATK"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61da97b1-0c4f-462c-939f-9586450fd878"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69e184e1-6522-4fc6-9421-874b6011105e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectUltimate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43ea8d88-2ebb-4d64-888e-991cedce65d2"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmBasicATK"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f623642-8e89-4149-b096-21659747c161"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0e77eb3-f7cf-4b75-9ed6-c213b64eb14e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmUltimate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aece4bed-9ce1-4726-b08c-c60a8fe3ae25"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterControls
        m_CharacterControls = asset.FindActionMap("CharacterControls", throwIfNotFound: true);
        m_CharacterControls_Move = m_CharacterControls.FindAction("Move", throwIfNotFound: true);
        // BattleControls
        m_BattleControls = asset.FindActionMap("BattleControls", throwIfNotFound: true);
        m_BattleControls_SelectBasicATK = m_BattleControls.FindAction("SelectBasicATK", throwIfNotFound: true);
        m_BattleControls_SelectSkill = m_BattleControls.FindAction("SelectSkill", throwIfNotFound: true);
        m_BattleControls_SelectUltimate = m_BattleControls.FindAction("SelectUltimate", throwIfNotFound: true);
        m_BattleControls_ConfirmBasicATK = m_BattleControls.FindAction("ConfirmBasicATK", throwIfNotFound: true);
        m_BattleControls_ConfirmSkill = m_BattleControls.FindAction("ConfirmSkill", throwIfNotFound: true);
        m_BattleControls_ConfirmUltimate = m_BattleControls.FindAction("ConfirmUltimate", throwIfNotFound: true);
        m_BattleControls_Navigate = m_BattleControls.FindAction("Navigate", throwIfNotFound: true);
    }

    ~@PlayeInput()
    {
        UnityEngine.Debug.Assert(!m_CharacterControls.enabled, "This will cause a leak and performance issues, PlayeInput.CharacterControls.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_BattleControls.enabled, "This will cause a leak and performance issues, PlayeInput.BattleControls.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterControls
    private readonly InputActionMap m_CharacterControls;
    private List<ICharacterControlsActions> m_CharacterControlsActionsCallbackInterfaces = new List<ICharacterControlsActions>();
    private readonly InputAction m_CharacterControls_Move;
    /// <summary>
    /// Provides access to input actions defined in input action map "CharacterControls".
    /// </summary>
    public struct CharacterControlsActions
    {
        private @PlayeInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public CharacterControlsActions(@PlayeInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "CharacterControls/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_CharacterControls_Move;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_CharacterControls; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="CharacterControlsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(CharacterControlsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="CharacterControlsActions" />
        public void AddCallbacks(ICharacterControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="CharacterControlsActions" />
        private void UnregisterCallbacks(ICharacterControlsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="CharacterControlsActions.UnregisterCallbacks(ICharacterControlsActions)" />.
        /// </summary>
        /// <seealso cref="CharacterControlsActions.UnregisterCallbacks(ICharacterControlsActions)" />
        public void RemoveCallbacks(ICharacterControlsActions instance)
        {
            if (m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="CharacterControlsActions.AddCallbacks(ICharacterControlsActions)" />
        /// <seealso cref="CharacterControlsActions.RemoveCallbacks(ICharacterControlsActions)" />
        /// <seealso cref="CharacterControlsActions.UnregisterCallbacks(ICharacterControlsActions)" />
        public void SetCallbacks(ICharacterControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="CharacterControlsActions" /> instance referencing this action map.
    /// </summary>
    public CharacterControlsActions @CharacterControls => new CharacterControlsActions(this);

    // BattleControls
    private readonly InputActionMap m_BattleControls;
    private List<IBattleControlsActions> m_BattleControlsActionsCallbackInterfaces = new List<IBattleControlsActions>();
    private readonly InputAction m_BattleControls_SelectBasicATK;
    private readonly InputAction m_BattleControls_SelectSkill;
    private readonly InputAction m_BattleControls_SelectUltimate;
    private readonly InputAction m_BattleControls_ConfirmBasicATK;
    private readonly InputAction m_BattleControls_ConfirmSkill;
    private readonly InputAction m_BattleControls_ConfirmUltimate;
    private readonly InputAction m_BattleControls_Navigate;
    /// <summary>
    /// Provides access to input actions defined in input action map "BattleControls".
    /// </summary>
    public struct BattleControlsActions
    {
        private @PlayeInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public BattleControlsActions(@PlayeInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "BattleControls/SelectBasicATK".
        /// </summary>
        public InputAction @SelectBasicATK => m_Wrapper.m_BattleControls_SelectBasicATK;
        /// <summary>
        /// Provides access to the underlying input action "BattleControls/SelectSkill".
        /// </summary>
        public InputAction @SelectSkill => m_Wrapper.m_BattleControls_SelectSkill;
        /// <summary>
        /// Provides access to the underlying input action "BattleControls/SelectUltimate".
        /// </summary>
        public InputAction @SelectUltimate => m_Wrapper.m_BattleControls_SelectUltimate;
        /// <summary>
        /// Provides access to the underlying input action "BattleControls/ConfirmBasicATK".
        /// </summary>
        public InputAction @ConfirmBasicATK => m_Wrapper.m_BattleControls_ConfirmBasicATK;
        /// <summary>
        /// Provides access to the underlying input action "BattleControls/ConfirmSkill".
        /// </summary>
        public InputAction @ConfirmSkill => m_Wrapper.m_BattleControls_ConfirmSkill;
        /// <summary>
        /// Provides access to the underlying input action "BattleControls/ConfirmUltimate".
        /// </summary>
        public InputAction @ConfirmUltimate => m_Wrapper.m_BattleControls_ConfirmUltimate;
        /// <summary>
        /// Provides access to the underlying input action "BattleControls/Navigate".
        /// </summary>
        public InputAction @Navigate => m_Wrapper.m_BattleControls_Navigate;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_BattleControls; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="BattleControlsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(BattleControlsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="BattleControlsActions" />
        public void AddCallbacks(IBattleControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleControlsActionsCallbackInterfaces.Add(instance);
            @SelectBasicATK.started += instance.OnSelectBasicATK;
            @SelectBasicATK.performed += instance.OnSelectBasicATK;
            @SelectBasicATK.canceled += instance.OnSelectBasicATK;
            @SelectSkill.started += instance.OnSelectSkill;
            @SelectSkill.performed += instance.OnSelectSkill;
            @SelectSkill.canceled += instance.OnSelectSkill;
            @SelectUltimate.started += instance.OnSelectUltimate;
            @SelectUltimate.performed += instance.OnSelectUltimate;
            @SelectUltimate.canceled += instance.OnSelectUltimate;
            @ConfirmBasicATK.started += instance.OnConfirmBasicATK;
            @ConfirmBasicATK.performed += instance.OnConfirmBasicATK;
            @ConfirmBasicATK.canceled += instance.OnConfirmBasicATK;
            @ConfirmSkill.started += instance.OnConfirmSkill;
            @ConfirmSkill.performed += instance.OnConfirmSkill;
            @ConfirmSkill.canceled += instance.OnConfirmSkill;
            @ConfirmUltimate.started += instance.OnConfirmUltimate;
            @ConfirmUltimate.performed += instance.OnConfirmUltimate;
            @ConfirmUltimate.canceled += instance.OnConfirmUltimate;
            @Navigate.started += instance.OnNavigate;
            @Navigate.performed += instance.OnNavigate;
            @Navigate.canceled += instance.OnNavigate;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="BattleControlsActions" />
        private void UnregisterCallbacks(IBattleControlsActions instance)
        {
            @SelectBasicATK.started -= instance.OnSelectBasicATK;
            @SelectBasicATK.performed -= instance.OnSelectBasicATK;
            @SelectBasicATK.canceled -= instance.OnSelectBasicATK;
            @SelectSkill.started -= instance.OnSelectSkill;
            @SelectSkill.performed -= instance.OnSelectSkill;
            @SelectSkill.canceled -= instance.OnSelectSkill;
            @SelectUltimate.started -= instance.OnSelectUltimate;
            @SelectUltimate.performed -= instance.OnSelectUltimate;
            @SelectUltimate.canceled -= instance.OnSelectUltimate;
            @ConfirmBasicATK.started -= instance.OnConfirmBasicATK;
            @ConfirmBasicATK.performed -= instance.OnConfirmBasicATK;
            @ConfirmBasicATK.canceled -= instance.OnConfirmBasicATK;
            @ConfirmSkill.started -= instance.OnConfirmSkill;
            @ConfirmSkill.performed -= instance.OnConfirmSkill;
            @ConfirmSkill.canceled -= instance.OnConfirmSkill;
            @ConfirmUltimate.started -= instance.OnConfirmUltimate;
            @ConfirmUltimate.performed -= instance.OnConfirmUltimate;
            @ConfirmUltimate.canceled -= instance.OnConfirmUltimate;
            @Navigate.started -= instance.OnNavigate;
            @Navigate.performed -= instance.OnNavigate;
            @Navigate.canceled -= instance.OnNavigate;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="BattleControlsActions.UnregisterCallbacks(IBattleControlsActions)" />.
        /// </summary>
        /// <seealso cref="BattleControlsActions.UnregisterCallbacks(IBattleControlsActions)" />
        public void RemoveCallbacks(IBattleControlsActions instance)
        {
            if (m_Wrapper.m_BattleControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="BattleControlsActions.AddCallbacks(IBattleControlsActions)" />
        /// <seealso cref="BattleControlsActions.RemoveCallbacks(IBattleControlsActions)" />
        /// <seealso cref="BattleControlsActions.UnregisterCallbacks(IBattleControlsActions)" />
        public void SetCallbacks(IBattleControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="BattleControlsActions" /> instance referencing this action map.
    /// </summary>
    public BattleControlsActions @BattleControls => new BattleControlsActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "CharacterControls" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="CharacterControlsActions.AddCallbacks(ICharacterControlsActions)" />
    /// <seealso cref="CharacterControlsActions.RemoveCallbacks(ICharacterControlsActions)" />
    public interface ICharacterControlsActions
    {
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "BattleControls" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="BattleControlsActions.AddCallbacks(IBattleControlsActions)" />
    /// <seealso cref="BattleControlsActions.RemoveCallbacks(IBattleControlsActions)" />
    public interface IBattleControlsActions
    {
        /// <summary>
        /// Method invoked when associated input action "SelectBasicATK" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectBasicATK(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SelectSkill" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectSkill(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SelectUltimate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectUltimate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ConfirmBasicATK" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnConfirmBasicATK(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ConfirmSkill" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnConfirmSkill(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ConfirmUltimate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnConfirmUltimate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Navigate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNavigate(InputAction.CallbackContext context);
    }
}
